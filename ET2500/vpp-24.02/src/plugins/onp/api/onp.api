/*
 * onp.api - binary API skeleton
 *
 * Copyright (c) 2021 Marvell.
 * SPDX-License-Identifier: Apache-2.0
 * https://spdx.org/licenses/Apache-2.0.html
 */

/**
 * @file
 * @brief VPP control-plane API messages.
 *
 * This file defines VPP control-plane binary API messages which are generally
 * called through a shared memory interface.
 */

/* Version and type recitations */

option version = "0.1.0";
import "plugins/onp/api/types.api";
import "vnet/interface_types.api";

/**
 * @brief Reply to get the ONP plugin version
 *
 * @param context[in] - Returned sender context, to match reply w/ request.
 *
 * Reply for the corresponding request is stored in this structure.
 */
define onp_show_version_reply
{
  u32 context;
  u32 patch_version;
  u32 major_version;
  u32 minor_version;
  i32 retval;
};

/**
 * @brief Get the ONP plugin version
 *
 * @param[in] client_index      - opaque cookie to identify the sender
 * @param[in] context           - sender context, to match reply w/ request
 */
define onp_show_version
{
  u32 client_index;
  u32 context;
};

/**
 * @brief Reply to get the show onp counters
 *
 * @param context[in] - Returned sender context, to match reply w/ request
 *
 * Reply for the corresponding request is stored in this structure.
 */
define onp_show_counters_reply
{
  u32 context;
  u64 global_counter_value [64];
  u64 global_pool_stat;
  u64 global_second_pool_stat;
  u32 n_threads_with_stats;
  u32 onp_max_counters;
  u32 n_global_stats;
  i32 retval;
  vl_api_onp_counter_details_t cd [64];
  vl_api_onp_thread_data_t td[32];
};

/**
 * @brief Get the show onp counters
 *
 * @param[in] client_index      - opaque cookie to identify the sender
 * @param[in] context           - sender context, to match reply w/ request
 */
define onp_show_counters
{
  u32 client_index;
  u32 context;
};

/**
 * @brief Set the port speed
 *
 * @param[in] client_index      - opaque cookie to identify the sender
 * @param[in] context           - sender context, to match reply w/ request
 * @param[in] sw_if_index       - index of the interface to set port speed on
 * @param[in] port_speed        - port_speed (Mbps)
 */
autoreply define onp_set_port_speed
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  u32 port_speed;
};

/**
 * @brief Set the port autoneg
 *
 * @param[in] client_index      - opaque cookie to identify the sender
 * @param[in] context           - sender context, to match reply w/ request
 * @param[in] sw_if_index       - index of the interface to set port autoneg on
 * @param[in] autoneg           - antoneg enable if non-zero; disable otherwise
 */
autoreply define onp_set_port_autoneg
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  bool autoneg;
};

/**
 * @brief Get the port autoneg status
 *
 * @param[in] client_index      - opaque cookie to identify the sender
 * @param[in] context           - sender context, to match reply w/ request
 * @param[in] sw_if_index       - index of the interface to get port autoneg on
 */
define onp_get_port_autoneg
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
};
define onp_get_port_autoneg_reply
{
  u32 context;
  bool autoneg;
  u32 retval;
};

/**
 * @brief Set the port duplex
 *
 * @param[in] client_index      - opaque cookie to identify the sender
 * @param[in] context           - sender context, to match reply w/ request
 * @param[in] sw_if_index       - index of the interface to set port duplex on
 * @param[in] duplex            - duplex enable if non-zero; disable otherwise
 */
autoreply define onp_set_port_duplex
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  bool duplex;
};

/**
 * @brief Get the port duplex status
 *
 * @param[in] client_index      - opaque cookie to identify the sender
 * @param[in] context           - sender context, to match reply w/ request
 * @param[in] sw_if_index       - index of the interface to get port duplex on
 */
define onp_get_port_duplex
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
};
define onp_get_port_duplex_reply
{
  u32 context;
  bool duplex;
  u32 retval;
};

/**
 * @brief Set port dscp to tc MAP
 *
 * @param[in] client_index      - opaque cookie to identify the sender
 * @param[in] context           - sender context, to match reply w/ request
 * @param[in] sw_if_index       - index of the interface to set dscp map on
 * @param[in] dscp              - dscp value
 * @param[in] tc                - tc value
 */
autoreply define onp_set_port_dscp_tc_map
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  u8 dscp;
  u8 tc;
};

/**
 * @brief Set port dot1p to tc MAP
 *
 * @param[in] client_index      - opaque cookie to identify the sender
 * @param[in] context           - sender context, to match reply w/ request
 * @param[in] sw_if_index       - index of the interface to set dot1p map on
 * @param[in] dot1p             - dot1p value
 * @param[in] tc                - tc value
 */
autoreply define onp_set_port_dot1p_tc_map
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  u8 dot1p;
  u8 tc;
};

/**
 * @brief Set port tc to queue MAP
 *
 * @param[in] client_index      - opaque cookie to identify the sender
 * @param[in] context           - sender context, to match reply w/ request
 * @param[in] sw_if_index       - index of the interface to set tc map on
 * @param[in] tc                - tc value
 * @param[in] queue             - queue value
 */
autoreply define onp_set_port_tc_queue_map
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  u8 tc;
  u8 queue;
};

/**
 * @brief remove port dscp to tc MAP
 *
 * @param[in] client_index      - opaque cookie to identify the sender
 * @param[in] context           - sender context, to match reply w/ request
 * @param[in] sw_if_index       - index of the interface to remove tc map on
 */
autoreply define onp_rm_port_dscp_tc_map
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
};

/**
 * @brief remove port dot1p to tc MAP
 *
 * @param[in] client_index      - opaque cookie to identify the sender
 * @param[in] context           - sender context, to match reply w/ request
 * @param[in] sw_if_index       - index of the interface to remove tc map on
 */
autoreply define onp_rm_port_dot1p_tc_map
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
};

/**
 * @brief remove port tc to queue MAP
 *
 * @param[in] client_index      - opaque cookie to identify the sender
 * @param[in] context           - sender context, to match reply w/ request
 * @param[in] sw_if_index       - index of the interface to remove tc map on
 */
autoreply define onp_rm_port_tc_queue_map
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
};

/**
 * @brief ONP hardware interface statistics structure
 * @param[in] sw_if_index       - index of the interface
 *
 * Reply for the corresponding request is stored in this structure.
 */
define onp_interface_stats_reply
{
  u32 context;
  vl_api_interface_index_t sw_if_index;
  vl_api_onp_xstats_t onp_xstats;
  i32 retval;
};

/**
 * @brief Request all or filtered subset of onp_interface_stats
 * @param[in] client_index      - opaque cookie to identify the sender
 * @param[in] context           - sender context, to match reply w/ request
 * @param[in] sw_if_index       - index of the interface to to dump info on, 0 or ~0 if on all
 */
define onp_interface_stats
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index [default=0xFFFFFFFF];
};

/**
 * @brief Set the port scheduler profile
 *
 * @param[in] client_index      - opaque cookie to identify the sender
 * @param[in] context           - sender context, to match reply w/ request
 * @param[in] sw_if_index       - index of the interface to set port duplex on
 * @param[in] sche_profile      - sche_profile id; ~0 is none
 */
autoreply define onp_pktio_port_set_scheduler
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  u32 profile_id;
};

/**
 * @brief Set the port queue scheduler profile
 *
 * @param[in] client_index      - opaque cookie to identify the sender
 * @param[in] context           - sender context, to match reply w/ request
 * @param[in] sw_if_index       - index of the interface to set port duplex on
 * @param[in] queue             - queue id
 * @param[in] sche_profile      - sche_profile id; ~0 is none
 */
autoreply define onp_pktio_port_queue_set_scheduler
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  u32 queue_id;
  u32 profile_id;
};

enum onp_pktio_scheduler_type
{
  API_ONP_PKTIO_SCHEDULER_STRICT = 0,
  API_ONP_PKTIO_SCHEDULER_DWRR = 1,
};

/**
 * @brief Reply to onp-pktio_ scheduler_profile add or del
 *
 * @param context[in] - Returned sender context, to match reply w/ request.
 *
 * Reply for the corresponding request is stored in this structure.
 */
define onp_pktio_scheduler_profile_add_del_reply
{
  u32 context;
  u32 profile_id;
  i32 retval;
};
 
/**
 * @brief add/del/update the scheduler profile
 *
 * @param[in] client_index      - opaque cookie to identify the sender
 * @param[in] context           - sender context, to match reply w/ request
 * @param[in] is_add            - add or del
 * @param[in] profile_id        - when is_add is set, and profile_id not ~0, update
 * @param[in] type              - SP or DWRR
 * @param[in] weight            - DWRR weight
 * @param[in] pkt_mode          - rate limit use packets
 * @param[in] min_rate          - min rate
 * @param[in] min_burst         - min burst
 * @param[in] max_rate          - max rate
 * @param[in] max_burst         - max burst
 */
define onp_pktio_scheduler_profile_add_del
{
  u32 client_index;
  u32 context;

  bool is_add [default=true];
  u32 profile_id;

  vl_api_onp_pktio_scheduler_type_t type;
  u32 weight;
  bool pkt_mode;
  u64 min_rate;
  u64 min_burst;
  u64 max_rate;
  u64 max_burst;
};

/**
 * @brief enable the scheduler profile
 *
 * @param[in] client_index      - opaque cookie to identify the sender
 * @param[in] context           - sender context, to match reply w/ request
 * @param[in] sw_if_index       - index of the interface to set port duplex on
 * @param[in] enable            - whether to enable or disable onp_traffic_class
 */
autoreply define onp_traffic_class
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  bool enable;
};

/*
 * Local Variables:
 * eval: (c-set-style "gnu")
 * End:
 */
