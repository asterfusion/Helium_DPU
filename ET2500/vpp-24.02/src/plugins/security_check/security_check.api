/* Hey Emacs use -*- mode: C -*- */
/*
 * Copyright 2024-2027 Asterfusion Network
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** \file
    This file defines the vpp control-plane API messages
    used to control the security-check plugin
*/

option version = "1.0.0";

import "vnet/interface_types.api";
import "vnet/ip/ip_types.api";
import "vnet/ethernet/ethernet_types.api";

enum security_check_type
{
  API_SECURITY_CHECK_TYPE_NONE = 0,
  API_SECURITY_CHECK_TYPE_DAI = 1,
  API_SECURITY_CHECK_TYPE_SAVI = 2,
  API_SECURITY_CHECK_TYPE_IPSG = 3,
  API_SECURITY_CHECK_TYPE_IPSGV6 = 4,
};

enum security_check_raguard_role_type
{
  API_SECURITY_CHECK_RAGUARD_NONE = 0,
  API_SECURITY_CHECK_RAGUARD_USER = 1,
  API_SECURITY_CHECK_RAGUARD_ROUTER = 2,
  API_SECURITY_CHECK_RAGUARD_HYBRID = 3,
};

typedef snooping_entry
{
  u16 vlan_id;
  vl_api_mac_address_t mac_address;
  vl_api_address_t ip_address;
  vl_api_interface_index_t sw_if_index;
};

autoreply define snooping_add_del
{
    u32 client_index;
    u32 context;
    u32 count;
    bool is_add [default=true];
    vl_api_snooping_entry_t entry[count];
};

autoreply define security_check_enable_disable
{
  u32 client_index;
  u32 context;
  bool is_enable [default=true];
  vl_api_interface_index_t sw_if_index;
  vl_api_security_check_type_t type;
};

autoreply define security_check_vlan_enable_disable
{
  u32 client_index;
  u32 context;
  bool is_enable [default=true];
  u16 vlan_id;
  vl_api_security_check_type_t type;
};

autoreply define security_check_vlan_refresh
{
  u32 client_index;
  u32 context;
  u16 vlan_id;
  vl_api_security_check_type_t type;
};

autoreply define security_check_vlan_trust_intf_set
{
  u32 client_index;
  u32 context;
  u16 vlan_id;
  vl_api_security_check_type_t type;
  u32 count;
  vl_api_interface_index_t sw_if_index_list[count];
};

define security_check_intf_drop_dump
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  vl_api_security_check_type_t type;
};

define security_check_intf_drop_details
{
  u32 context;
  u64 drop_pkt;
  u64 drop_bytes;
};

define security_check_vlan_drop_dump
{
  u32 client_index;
  u32 context;
  u16 vlan_id;
  vl_api_security_check_type_t type;
};

define security_check_vlan_drop_details
{
  u32 context;
  u64 drop_pkt;
  u64 drop_bytes;
};

autoreply define security_check_raguard_role
{
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  vl_api_security_check_raguard_role_type_t role;
};
