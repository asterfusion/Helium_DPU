#!/bin/bash
# SPDX-License-Identifier: BSD-3-Clause
# Copyright(C) 2023 Marvell.

SSH=${TARGET_SSH_CMD:-"ssh -o LogLevel=ERROR -o ServerAliveInterval=30 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"}

run_bin()
{
	local remote
	local bin
	local bin_args
	local in_file
	local out_file
	local bg_ena=0
	local ssh_cmd

	while [[ "$#" -gt 0 ]]
	do
		case $1 in
			--remote)
				remote="$2"
				;;
			--bin)
				bin="$2"
				;;
			--bin_args)
				bin_args="$2"
				;;
			--in_file)
				in_file="$2"
				;;
			--out_file)
				out_file="$2"
				;;
			--bg_ena)
				bg_ena=1
				;;
		esac
		shift
	done

	if [ -n "$in_file" ]; then
		ssh_cmd+="tail -f $in_file |"
	fi

	ssh_cmd+=" $bin"

	if [ -n "$bin_args" ]; then
		ssh_cmd+=" $bin_args"
	fi

	if [ -n "$out_file" ]; then
		ssh_cmd+=" &> $out_file"
	fi

	if [ $bg_ena -eq 1 ]; then
		ssh_cmd+=" &"
	fi

	$SSH $remote "$ssh_cmd"
}

find_bin()
{
	local remote="$1"
	local bin="$2"
	local location="$3"

	$SSH $remote "sudo find $location -type f -executable -iname $bin"
}

write_file()
{
	local remote="$1"
	local in_file="$2"
	local cmd="$3"

	$SSH $remote "echo "$cmd" >> $in_file"
}

read_file()
{
	local remote="$1"
	local out_file="$2"

	$SSH $remote "cat $out_file"
}

wait_for_prompt()
{
	local remote="$1"
	local out_file="$2"
	local pattern="$3"

	while ! ($SSH $remote test -f $out_file); do
		continue
	done

	while ! ($SSH $remote tail -n1 $out_file | grep -q "$pattern"); do
		continue
	done
}

