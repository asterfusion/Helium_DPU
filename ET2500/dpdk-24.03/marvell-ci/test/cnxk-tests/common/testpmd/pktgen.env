#!/bin/bash
# SPDX-License-Identifier: BSD-3-Clause
# Copyright(C) 2021 Marvell.

PKTGEN_SCRIPT_PATH=$(dirname $(readlink -f "${BASH_SOURCE[0]}"))
source $PKTGEN_SCRIPT_PATH/common.env

function pktgen_cleanup()
{
	testpmd_cleanup "pktgen"
}

function pktgen_prompt()
{
	testpmd_prompt "pktgen"
}

function pktgen_launch()
{
	local opts
	local coremask="0x3"
	local port="0002:01:00.1"
	local pcapin=$PKTGEN_SCRIPT_PATH/../pcap/sample.pcap

	if ! opts=$(getopt \
	        -o "i:p:c:" \
		-l "in-pcap:,port:,coremask:" \
		-- "$@"); then
		echo "Failed to parse pktgen arguments"
		exit 1
	fi

	eval set -- "$opts"
	while [[ $# -gt 1 ]]; do
		case $1 in
			-i|--in-pcap) shift; pcapin=$1;;
			-p|--port) shift; port=$1;;
			-c|--coremask) shift; coremask=$1;;
			*) echo "Unknown pktgen argument"; exit 1;;
		esac
		shift
	done

	testpmd_launch "pktgen" \
		"-c $coremask -a $port --vdev eth_pcap0,rx_pcap=$pcapin,tx_pcap=out.pcap" \
		"--port-topology=paired --portlist=0,1 --no-flush-rx"
}

function pktgen_start()
{
	testpmd_cmd "pktgen" "start"
}

function pktgen_quit()
{
	testpmd_quit "pktgen"
}

function pktgen_stats()
{
	testpmd_port_stats "pktgen" "0"
}

function pktgen_rx_count()
{
	testpmd_port_rx_count "pktgen" "0"
}

function pktgen_rx_bytes()
{
	testpmd_port_rx_bytes "pktgen" "0"
}

function pktgen_tx_count()
{
	testpmd_port_tx_count "pktgen" "0"
}

function pktgen_tx_bytes()
{
	testpmd_port_tx_bytes "pktgen" "0"
}

function pktgen_log()
{
	testpmd_log "pktgen" | awk '{print "PKTGEN# "$0}'
}
