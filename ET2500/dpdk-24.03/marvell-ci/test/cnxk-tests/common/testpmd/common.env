#!/bin/bash
# SPDX-License-Identifier: BSD-3-Clause
# Copyright(C) 2021 Marvell.

TESTPMD_SCRIPT_PATH=$(dirname $(readlink -f "${BASH_SOURCE[0]}"))

if [[ -f $TESTPMD_SCRIPT_PATH/../../../../../app/dpdk-testpmd ]]; then
	# This is running from build directory
	TESTPMD=$TESTPMD_SCRIPT_PATH/../../../../../app/dpdk-testpmd
elif [[ -f $TESTPMD_SCRIPT_PATH/../../../dpdk-testpmd ]]; then
	# This is running from install directory
	TESTPMD=$TESTPMD_SCRIPT_PATH/../../../dpdk-testpmd
else
	TESTPMD=$(which dpdk-testpmd)
fi

if [[ -z $TESTPMD ]]; then
	echo "dpdk-testpmd not found !!"
	exit 1
fi

function testpmd_cleanup()
{
	local prefix=$1

	# Issue kill
	ps -eo "pid,args" | grep testpmd | grep $prefix | \
		awk '{print $1}' | xargs -I[] -n1 kill -9 [] 2>/dev/null || true

	# Wait until the process is killed
	while (ps -ef | grep testpmd | grep -q $prefix); do
		continue
	done
}

function testpmd_prompt()
{
	local prefix=$1
	local refresh=${2:-}
	local skip_bytes=${3:-}
	local in=testpmd.in.$prefix
	local out=testpmd.out.$prefix

	local cmd="tail -n1 $out"

	if [[ "$skip_bytes" != "" ]]
	then
		cmd="tail -c +$skip_bytes $out"
	fi

	while ! ($cmd | grep -q "^testpmd> $"); do
		if [ "$refresh" == "yes" ]
		then
			sleep 0.01
			echo "" >>$in
		fi
		continue;
	done
}

function testpmd_launch()
{
	local prefix=$1
	local eal_args=$2
	local testpmd_args=$3
	local out=testpmd.out.$prefix
	local in=testpmd.in.$prefix
	local unbuffer="stdbuf -o0"

	testpmd_cleanup $prefix
	rm -f $out
	rm -f $in
	touch $in
	tail -f $in | \
		($unbuffer $TESTPMD $eal_args --file-prefix $prefix -- \
			$testpmd_args -i &>$out) &
	# Wait till out file is created
	while [[ ! -f $out ]]; do
		continue
	done
	# Wait till testpmd prompt comes up
	testpmd_prompt $prefix
}

function testpmd_cmd()
{
	local prefix=$1
	local cmd=$2
	local in=testpmd.in.$prefix
	local skip_bytes=$(stat -c %s testpmd.out.$prefix)

	echo "$cmd" >> $in
	testpmd_prompt $prefix "no"  $skip_bytes
}

function testpmd_cmd_refresh()
{
	local prefix=$1
	local cmd=$2
	local in=testpmd.in.$prefix

	echo "$cmd" >> $in
	testpmd_prompt $prefix "yes"
}

function testpmd_quit()
{
	local prefix=$1
	local in=testpmd.in.$prefix

	echo "quit" >> $in
	while (ps -ef | grep dpdk-testpmd | grep -q $prefix); do
		continue
	done
}

function testpmd_port_stats()
{
	local prefix=$1
	local port=$2
	local in=testpmd.in.$prefix
	local out=testpmd.out.$prefix

	echo "show port stats $port" >> $in
	sleep 0.5
	testpmd_prompt $prefix
	cat $out | tail -n10 | head -n4
}

function testpmd_port_rx_count()
{
	local stats=$(testpmd_port_stats $1 $2)

	echo $stats | awk '{print $2}'
}

function testpmd_port_rx_bytes()
{
	local stats=$(testpmd_port_stats $1 $2)

	echo $stats | awk '{print $6}'
}

function testpmd_port_tx_count()
{
	local stats=$(testpmd_port_stats $1 $2)

	echo $stats | awk '{print $12}'
}

function testpmd_port_tx_bytes()
{
	local stats=$(testpmd_port_stats $1 $2)

	echo $stats | awk '{print $16}'
}

function testpmd_log()
{
	local prefix=$1
	local out=testpmd.out.$prefix
	cat $out
}

function testpmd_log_off()
{
	local prefix=$1
	local offset=$2
	local out=testpmd.out.$prefix

	dd if=$out skip=$offset bs=1 status=none
}

function testpmd_log_sz()
{
	local prefix=$1
	local out=testpmd.out.$prefix

	stat -c %s $out
}
