#!/bin/bash

# SPDX-License-Identifier: BSD-3-Clause
# Copyright (C) 2021 Marvell.

# Directory to keep run specific data on build machine
RUN_DIR=${RUN_DIR:-$BUILD_DIR}

# Test run command
TEST_RUN_CMD=$PROJECT_ROOT/marvell-ci/test/board/board_test_run.sh

# Skip syncing DPDK build directory to target
SKIP_SYNC=${SKIP_SYNC:-}

# Skip setting up target. Useful when repeatedly running tests.
SKIP_TARGET_SETUP=${SKIP_TARGET_SETUP:-}

# Reboot the target if DPDK tests fail
REBOOT_ON_FAIL=${REBOOT_ON_FAIL:-}

# Platform
PLAT=${PLAT:-"cn9k"}

# Target board user@IP. The user is expected to have passwordless ssh.
TARGET_BOARD=${TARGET_BOARD:-root@127.0.0.1}

# Generator board user@IP. The user is expected to have passwordless ssh.
GENERATOR_BOARD=${GENERATOR_BOARD:-}

# Target directory where the DPDK build is to synced
REMOTE_DIR=${REMOTE_DIR:-/tmp/dpdk}

# Directory from where the tests will eventually run.
TARGET_RUN_DIR=${TARGET_RUN_DIR:-$REMOTE_DIR}

# Sudo command used when running the tests
TARGET_SUDO=sudo

# SSH command used to access board
TARGET_SSH_CMD=${TARGET_SSH_CMD:-"ssh -o LogLevel=ERROR -o ServerAliveInterval=30 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"}

# SCP command used to copy files on board
TARGET_SCP_CMD=${TARGET_SCP_CMD:-"scp -o LogLevel=ERROR -o ServerAliveInterval=30 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"}

# Extra env to be set when running the tests on the target
EXTRA_TARGET_ENV=${EXTRA_TARGET_ENV:-}

# Default timeout to be applied to the test commands
DEFAULT_CMD_TIMEOUT=${DEFAULT_CMD_TIMEOUT:-30m}

# Test specific command timeouts. To be given as a string of test=timeout entries.
# Eg: CMD_TIMEOUTS="dump_memzone=20m dump_physmem=30m"
CMD_TIMEOUTS=${CMD_TIMEOUTS:-}

# Additional arguments to be passed for specific tests.
CMD_EXTRA_ARGS="
cryptodev_openssl_autotest, --vdev crypto_openssl --log-level=7
cryptodev_sw_snow3g_autotest, --vdev crypto_snow3g --log-level=7
"

# List of tests to be run. If list is empty all tests are run except those in SKIP_TESTS.
RUN_TESTS=${RUN_TESTS:-}

# Flag to enable target setup needed for perf stage.
PERF_STAGE=${PERF_STAGE:-}

# Continue testing regardless of failure
CONTINUE_ON_FAILURE=${CONTINUE_ON_FAILURE:-}

# File to save status into
STATUS_OUTFILE=${STATUS_OUTFILE:-}

# Flag to enable target setup needed for TM tests
TM_SETUP=${TM_SETUP:-1}

FIXME_SKIP_TESTS="
	cnxk_tm_test
"

DEFAULT_SKIP_TESTS="
	distributor_autotest
	func_reentrancy_autotest
	ipsec_autotest
	kni_autotest
	power_cpufreq_autotest
	power_kvm_vm_autotest
	cryptodev_aesni_mb_autotest
	cryptodev_aesni_gcm_autotest
	cryptodev_cn9k_asym_autotest
	cryptodev_cn9k_autotest
	cryptodev_cn10k_asym_autotest
	cryptodev_cn10k_autotest
	cryptodev_dpaa_sec_autotest
	cryptodev_dpaa2_sec_autotest
	cryptodev_openssl_asym_autotest
	cryptodev_qat_autotest
	cryptodev_sw_armv8_autotest
	cryptodev_sw_kasumi_autotest
	cryptodev_sw_mvsam_autotest
	cryptodev_sw_zuc_autotest
	eventdev_selftest_octeontx
	link_bonding_mode4_autotest
	cryptodev_scheduler_autotest
	cnxk_crypto_perf
	cnxk_event_perf
	cnxk_ipsec_la_perf
	cnxk_ipsec_inline_perf
	cnxk_mempool_perf
	cnxk_fwd_perf
	cnxk_dma_perf
	cnxk_ptp_test
	flow_perf
	cnxk_ipsec_msns
	cnxk_gpio_test
	cnxk_mtr_test_config
	cpt_2nd_pass_flow
	cnxk_mbuf_perf
	cnxk_macsec_inline_perf
	inline_ipsec_autotest
	inline_macsec_autotest
	cnxk_ipsec_reassembly_perf
	cnxk_multi_pool_pkt_tx
	cnxk_multi_pool_pkt_tx_scalar
	cnxk_multi_mempool
	cnxk_hwpool_tests
	acl_autotest
	atomic_autotest
	bitmap_autotest
	bpf_autotest
	bpf_convert_autotest
	bitops_autotest
	byteorder_autotest
	cksum_autotest
	cmdline_autotest
	common_autotest
	cpuflags_autotest
	debug_autotest
	devargs_autotest
	eal_flags_c_opt_autotest
	eal_flags_main_opt_autotest
	eal_flags_n_opt_autotest
	eal_flags_hpet_autotest
	eal_flags_no_huge_autotest
	eal_flags_a_opt_autotest
	eal_flags_b_opt_autotest
	eal_flags_vdev_opt_autotest
	eal_flags_r_opt_autotest
	eal_flags_mem_autotest
	eal_flags_file_prefix_autotest
	eal_flags_misc_autotest
	eal_fs_autotest
	errno_autotest
	ethdev_link_status
	event_ring_autotest
	fib_autotest
	fib6_autotest
	func_reentrancy_autotest
	hash_autotest
	interrupt_autotest
	ipfrag_autotest
	lcores_autotest
	logs_autotest
	lpm_autotest
	lpm6_autotest
	malloc_autotest
	mbuf_autotest
	mcslock_autotest
	memcpy_autotest
	memory_autotest
	mempool_autotest
	memzone_autotest
	meter_autotest
	multiprocess_autotest
	per_lcore_autotest
	pflock_autotest
	prefetch_autotest
	rcu_qsbr_autotest
	pie_autotest
	rib_autotest
	rib6_autotest
	ring_autotest
	rwlock_test1_autotest
	rwlock_rda_autotest
	rwlock_rds_wrm_autotest
	rwlock_rde_wro_autotest
	sched_autotest
	security_autotest
	seqlock_autotest
	spinlock_autotest
	stack_autotest
	stack_lf_autotest
	string_autotest
	tailq_autotest
	ticketlock_autotest
	timer_autotest
	user_delay_us
	version_autotest
	crc_autotest
	distributor_autotest
	eventdev_common_autotest
	fbarray_autotest
	hash_readwrite_func_autotest
	kni_autotest
	kvargs_autotest
	member_autotest
	power_cpufreq_autotest
	power_autotest
	power_kvm_vm_autotest
	power_intel_uncore_autotest
	reorder_autotest
	service_autotest
	thash_autotest
	threads_autotest
	metrics_autotest
	telemetry_json_autotest
	telemetry_data_autotest
	table_autotest
	ring_pmd_autotest
	bitratestats_autotest
	latencystats_autotest
	pdump_autotest
	vdev_autotest
	rawdev_autotest
	telemetry_all
	cnxk_mac_test
	cnxk_ingress_policer
	cpt_raw_test
	${FIXME_SKIP_TESTS}
"

# Tests to skipped.
SKIP_TESTS=${SKIP_TESTS:-$DEFAULT_SKIP_TESTS}

# Run tests within this test num range
START_TEST_NUM=${START_TEST_NUM:-1}
END_TEST_NUM=${END_TEST_NUM:-999}

# Functions required to work with test list file.
source $PROJECT_ROOT/marvell-ci/test/common/test_list_helper_funcs.sh

# Export the path to this conf so that other scripts can source this conf.
export TEST_ENV_CONF=$PROJECT_ROOT/marvell-ci/test/env/cn9k.env
